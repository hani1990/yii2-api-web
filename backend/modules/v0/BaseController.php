<?php
namespace app\modules\v0;
use common\models\hexin\Model;
use deepziyu\yii\rest\ApiException;
use yii\base\DynamicModel;
use yii\base\Exception;
use yii\base\InlineAction;
use yii\filters\auth\AuthMethod;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;
use yii\web\BadRequestHttpException;
use yii\web\HttpException;

/**
 * Created by PhpStorm.
 * User: liuhan
 * Date: 2017/12/27
 * Time: 下午3:00
 */
class BaseController extends \deepziyu\yii\rest\Controller
{
    public $responseType = 'json';
    /**
     * @var string 返回的消息类型，调试选项，如果是 string 将会序列化其他类型数据成字符串
     */
    public $errorMessageType = "string";
    /**
     * @var bool 是否允许以 httpCode 的形式返回错误请求，默认开启
     */
    public $enableHttpCode = false;
    /**
     * 默认错误提示
     *
     * @return array
     */
    public static function responseCode()
    {
        return [
            '200' => '执行成功',
            '400' => '参数错误',
            '401' => '需要登录',
            '403' => '鉴权失败',
            '404' => '资源找不到',
            '423' => '资源锁定',
            '496' => '操作失败',
            '497' => '访问次数间隔太短,需等待后重试',
            '498' => '超过次数,需重新请求',
            '499' => '验证失败',
            '597' => '访问次数受限',
            '598' => '访问频率过高',
            '599' => '服务端操作失败',
            '600' => '数据已经存在',
        ];
    }
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

   
    /**
     * action参数注入
     * @param \yii\base\Action $action
     * @param array $params
     * @return array
     * @throws BadRequestHttpException
     * @throws ApiException
     */
    public function bindActionParams($action, $params)
    {

        if ($action instanceof InlineAction) {
            $method = new \ReflectionMethod($this, $action->actionMethod);
        } else {
            $method = new \ReflectionMethod($action, 'run');
        }
        //验证post和get传过来的数据
        $params_post = $this->request->post();
        $param_get = $this->request->get();
        $params = array_merge($params_post, $param_get);
        $rule = $this->getRule($action);

        $paramList = [];
        foreach ($rule as $v) {
            if (!isset($v[0])) {
                //$this->result([], "400")->send();
            }
            if (is_array($v[0])) {
                foreach ($v[0] as $vv) {
                    if (!isset($paramList[$vv])) {
                        $paramList[$vv] = isset($params[$vv]) ? $params[$vv] : null;
                    }
                }
            } else {
                $paramList[$v[0]] = isset($params[$v[0]]) ? $params[$v[0]] : null;
            }

        }
        //根据rule中的规则,检查输入字段
        if ($rule) {
            if($rule instanceof Model){
                $model = $rule;
                $model->load($params,'');
            }else{
                $model = DynamicModel::validateData($paramList, $rule);
            }

            if ($model->hasErrors()) {
                throw new HttpException(200, Json::encode($model->getErrors()), 301  );
            }
            $params = array_replace($params, $model->getAttributes());
        }
        $args = [];
        $missing = [];
        foreach ($method->getParameters() as $param) {
            $name = $param->getName();
            if (array_key_exists($name, $params)) {
                if ($param->isArray()) {
                    $args[] = (array)$params[$name];
                } elseif (!is_array($params[$name])) {
                    $args[] = $params[$name];
                } else {
                    throw new BadRequestHttpException(\Yii::t('yii', 'Invalid data received for parameter "{param}".', [
                        'param' => $name,
                    ]));
                }
            } elseif ($param->isDefaultValueAvailable()) {
                $args[] = $params[$name] = $param->getDefaultValue();
            } else {
                $missing[] = $name;
            }
        }

        if (!empty($missing)) {
            throw new BadRequestHttpException(\Yii::t('yii', 'Missing required parameters: {params}', [
                'params' => implode(', ', $missing),
            ]));
        }

        $this->actionParams = $params;

        return $args;
    }
    /**
     * 构造统一返回结果
     *
     * @param string $code
     * @param string $msg
     * @param string $data
     * @return array
     */
    public function response($code, $msg, $data)
    {
        if($code == '200'){
            $code = '000';
        }
        $data = [
            "code" => (string)$code,
            "message" => ($this->errorMessageType == "string" && !is_string($msg)) ? serialize($msg) : $msg,
            "data" => $data
        ];
        return $data;
    }

    public function result($data = [], $code = "200", $msg = "")
    {
        $code .= '';
        $response = \Yii::$app->getResponse();
        $response->format = $this->responseType;
        if (empty($msg) && !empty($this::responseCode()[$code])) {
            $msg = $this::responseCode()[$code];
        }
        $response->data = $this->response($code, $this->serializeData($msg), $data );
        if ($this->enableHttpCode) {
            $response->statusCode = $code;
        }
        return $response;
    }
    public function getParam($key, $default = null)
    {
        return ArrayHelper::getValue($this->actionParams, $key, $default);
    }
}